blueprint:
  name: PawControl resilience escalation follow-up
  description: >-
    Evaluate the PawControl resilience_escalation panel via the generated
    statistics sensor and trigger the integration-managed escalation script
    along with optional pager or follow-up actions whenever guard skips or
    breaker counts cross the configured thresholds.
  domain: automation
  input:
    statistics_sensor:
      name: PawControl statistics sensor
      description: Sensor that exposes the service_execution attributes used by the resilience dashboard.
      selector:
        entity:
          domain: sensor
      default: sensor.pawcontrol_statistics
    escalation_script:
      name: Resilience escalation script
      description: Script entity created by PawControl (script.pawcontrol_*_resilience_escalation).
      selector:
        entity:
          domain: script
    guard_followup_actions:
      name: Guard follow-up actions
      description: Optional actions to run after guard skip escalations fire.
      default: []
      selector:
        action: {}
    breaker_followup_actions:
      name: Breaker follow-up actions
      description: Optional actions to run after breaker escalations fire.
      default: []
      selector:
        action: {}
    watchdog_interval_minutes:
      name: Watchdog interval (minutes)
      description: Interval for periodic resilience checks. Set to 0 to disable.
      default: 0
      selector:
        number:
          min: 0
          max: 1440
          mode: box
    manual_check_event:
      name: Manual check event
      description: Event type that triggers an on-demand resilience check. Leave blank to disable.
      default: pawcontrol_resilience_check
      selector:
        text: {}
    manual_guard_event:
      name: Manual guard check event
      description: Event type that triggers guard follow-up actions on demand. Leave blank to disable.
      default: ""
      selector:
        text: {}
    manual_breaker_event:
      name: Manual breaker check event
      description: Event type that triggers breaker follow-up actions on demand. Leave blank to disable.
      default: ""
      selector:
        text: {}

mode: restart
max_exceeded: silent

trigger:
  - platform: state
    entity_id: !input statistics_sensor
    attribute: service_execution
    id: service_execution_update
  - platform: homeassistant
    event: start
    id: homeassistant_start
  - platform: time_pattern
    minutes: "/{{ watchdog_step }}"
    enabled: "{{ watchdog_enabled }}"
    id: watchdog_interval
  - platform: event
    event_type: !input manual_check_event
    enabled: "{{ manual_event_enabled }}"
    id: manual_event
  - platform: event
    event_type: !input manual_guard_event
    enabled: "{{ manual_guard_enabled }}"
    id: manual_guard_event
  - platform: event
    event_type: !input manual_breaker_event
    enabled: "{{ manual_breaker_enabled }}"
    id: manual_breaker_event

variables:
  statistics_sensor: !input statistics_sensor
  escalation_script: !input escalation_script
  guard_followup_actions: !input guard_followup_actions
  breaker_followup_actions: !input breaker_followup_actions
  watchdog_interval_minutes: !input watchdog_interval_minutes
  manual_check_event: !input manual_check_event
  manual_guard_event: !input manual_guard_event
  manual_breaker_event: !input manual_breaker_event
  watchdog_enabled: "{{ (watchdog_interval_minutes | int(0)) > 0 }}"
  manual_event_enabled: "{{ (manual_check_event | default('', true) | trim) != '' }}"
  manual_guard_enabled: "{{ (manual_guard_event | default('', true) | trim) != '' }}"
  manual_breaker_enabled: "{{ (manual_breaker_event | default('', true) | trim) != '' }}"
  watchdog_step: "{{ [watchdog_interval_minutes | int(0), 1] | max }}"
  service_execution: "{{ state_attr(statistics_sensor, 'service_execution') or {} }}"
  guard_metrics: >-
    {% set metrics = service_execution.get('guard_metrics') %}
    {% if metrics is mapping %}{{ metrics }}{% else %}{{ {} }}{% endif %}
  rejection_metrics: >-
    {% set metrics = service_execution.get('rejection_metrics') %}
    {% if metrics is mapping %}{{ metrics }}{% else %}{{ {} }}{% endif %}
  skip_count: "{{ guard_metrics.get('skipped', 0) | int(0) }}"
  executed_count: "{{ guard_metrics.get('executed', 0) | int(0) }}"
  guard_skip_ratio: >-
    {% set skipped = guard_metrics.get('skipped', 0) | int(0) %}
    {% set executed = guard_metrics.get('executed', 0) | int(0) %}
    {% set total = skipped + executed %}
    {% if total > 0 %}{{ (skipped / total) | float(0) }}{% else %}0{% endif %}
  open_breaker_count: "{{ rejection_metrics.get('open_breaker_count', 0) | int(0) }}"
  half_open_breaker_count: "{{ rejection_metrics.get('half_open_breaker_count', 0) | int(0) }}"
  rejection_breaker_count: "{{ rejection_metrics.get('rejection_breaker_count', 0) | int(0) }}"
  total_breaker_count: "{{ open_breaker_count + half_open_breaker_count }}"
  script_fields: "{{ state_attr(escalation_script, 'fields') or {} }}"
  skip_threshold: >-
    {% set field = script_fields.get('skip_threshold') %}
    {% if field is mapping %}
      {% set active = field.get('default') %}
      {{ (active | int(0)) if active is not none else 3 }}
    {% elif field is number %}
      {{ field | int(0) }}
    {% else %}3{% endif %}
  breaker_threshold: >-
    {% set field = script_fields.get('breaker_threshold') %}
    {% if field is mapping %}
      {% set active = field.get('default') %}
      {{ (active | int(0)) if active is not none else 1 }}
    {% elif field is number %}
      {{ field | int(0) }}
    {% else %}1{% endif %}
  guard_triggered: >-
    {{ (skip_threshold | int(0)) > 0 and skip_count >= (skip_threshold | int(0)) }}
  breaker_triggered: >-
    {{ (breaker_threshold | int(0)) > 0 and (total_breaker_count >= (breaker_threshold | int(0)) or rejection_breaker_count > 0) }}

action:
  - choose:
      - conditions:
          - condition: template
            value_template: >-
              {{ guard_triggered or breaker_triggered or trigger.id in [
                'manual_event', 'manual_guard_event', 'manual_breaker_event'
              ] }}
        sequence:
          - service: script.turn_on
            target:
              entity_id: "{{ escalation_script }}"
            data:
              statistics_entity_id: "{{ statistics_sensor }}"
              skip_threshold: "{{ skip_threshold | int(0) }}"
              breaker_threshold: "{{ breaker_threshold | int(0) }}"
  - choose:
      - conditions:
          - condition: template
            value_template: >-
              {{ (guard_triggered or trigger.id in ['manual_event', 'manual_guard_event'])
                 and ((guard_followup_actions | default([], true)) | length) > 0 }}
        sequence: !input guard_followup_actions
  - choose:
      - conditions:
          - condition: template
            value_template: >-
              {{ (breaker_triggered or trigger.id in ['manual_event', 'manual_breaker_event'])
                 and ((breaker_followup_actions | default([], true)) | length) > 0 }}
        sequence: !input breaker_followup_actions
