# Ruff = Linter + Formatter für HA-Style
# Doku: https://docs.astral.sh/ruff/
# HA nutzt Ruff für Format & Lint. Ziel: schnell & CI-konsistent.

# -------------------- Global --------------------
target-version = "py313"       # HA 2025.8 läuft auf Python 3.13
line-length = 88               # Ruff-Formatter Default (HA-kompatibel)
unsafe-fixes = true
extend-exclude = [
  ".git",
  ".venv",
  "venv",
  "build",
  "dist",
  "node_modules",
  # Test-/Fixture-Daten nicht linten
  "tests/fixtures",
  "tests/data",
]

# -------------------- Lint-Auswahl --------------------
[lint]
# Kernregeln: PEP8/pyflakes/pycodestyle + Import-Sort + moderne Syntax + Bugs
select = [
  "E",    # pycodestyle
  "F",    # pyflakes
  "W",    # pycodestyle warnings
  "I",    # isort (Import-Sort via Ruff)
  "UP",   # pyupgrade (moderne Syntax)
  "B",    # flake8-bugbear
  "A",    # flake8-builtins
  "BLE",  # flake8-blind-except
  "RET",  # flake8-return
  "SIM",  # flake8-simplify
  "PERF", # perflint
  "TRY",  # tryceratops (Exception-Handling)
  "PGH",  # pygrep-hooks (typische Fehler)
  "N",    # pep8-naming
]

# Häufige, in HA-Komponenten legitime Ausnahmen:
ignore = [
  # In __init__.py sind re-exporte üblich
  "E402",  # module level import not at top of file (für HA-Init teils okay)
]

# Optional: Preview-Checks deaktiviert lassen, bis du sie bewusst aktivierst
preview = false

# Import-Sorter (wie isort) innerhalb Ruff steuern:
[lint.isort]
force-single-line = false
known-first-party = ["custom_components", "tests"]
combine-as-imports = true

# -------------------- Per-File-Ignores --------------------
[lint.per-file-ignores]
"custom_components/**/__init__.py" = ["F401"]   # re-exporte erlauben
"tests/**" = ["S101", "D"]                      # keine Bandit/Dokstring-Pflicht in Tests

# -------------------- Formatter --------------------
[format]
quote-style = "preserve"
indent-style = "space"
line-ending = "lf"
docstring-code-format = true   # Codeblöcke in Docstrings formatieren
