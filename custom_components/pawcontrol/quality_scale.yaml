# Home Assistant quality-scale tracker for PawControl
#
# PawControl now satisfies the Platinum tier. Each rule below references the
# supporting implementation or regression coverage that keeps the manifest,
# documentation, and diagnostics aligned with Home Assistant guidance.

quality_scale: platinum

rules:
  has-owner:
    status: done
    comment: "`manifest.json` and `CODEOWNERS` list @BigDaddy1990 as the maintainer of record."

  config-flow:
    status: done
    comment: "User, discovery, reconfigure, options, and reauth steps live in `config_flow.py` with regression coverage in `tests/components/pawcontrol/test_config_flow.py`."

  docs-actions:
    status: done
    comment: "All services are documented in `services.yaml`, README, and automation guides, matching the handlers in `services.py` and `script_manager.py`."

  docs-removal:
    status: done
    comment: "Removal, device cleanup, and cloud disconnect workflows are covered in README, `docs/MAINTENANCE.md`, and the portal guides."

  runtime-data:
    status: done
    comment: "Platforms resolve managers through runtime data containers as implemented in `__init__.py`, `coordinator_runtime.py`, and verified by `tests/unit/test_runtime_manager_container_usage.py`."

  stale-devices:
    status: done
    comment: "`async_remove_config_entry_device` protects active hardware with tests in `tests/components/pawcontrol/test_init.py`."

  dynamic-devices:
    status: done
    comment: "Entity reload and recreation paths are covered by init and platform tests ensuring dynamic devices survive config entry reloads."

  test-before-setup:
    status: done
    comment: "Config flow and setup tests assert that invalid credentials, malformed imports, and network errors abort cleanly."

  test-before-update:
    status: done
    comment: "Coordinator suites raise `UpdateFailed` and validate retry handling for runtime fetch errors."

  test-before-unload:
    status: done
    comment: "`async_unload_entry` paths are exercised across success, failure, and no-runtime-data scenarios in the init tests."

  test-coverage:
    status: done
    comment: "`pytest -q` executes unit, component, and end-to-end suites with the 100% coverage floor enforced by `pyproject.toml`."

  brands:
    status: done
    comment: "Brand assets ship in `brands/pawcontrol/` and align with the integration documentation."

  documentation:
    status: done
    comment: "README, `info.md`, and the documentation portal provide setup, maintenance, diagnostics, and troubleshooting coverage with citations."

  diagnostics:
    status: done
    comment: "`diagnostics.py` exports anonymised telemetry (including rejection metrics) with validation in diagnostics tests."

  repairs:
    status: done
    comment: "Actionable repair issues are registered in `repairs.py` and covered by the associated regression tests."

  maintenance-playbook:
    status: done
    comment: "Sustainment cadence and evidence curation live in `docs/MAINTENANCE.md` and `dev.md`."

  localization:
    status: done
    comment: "`strings.json` and `translations/` deliver full localisation for the config flow, options, and diagnostics surfaces."
