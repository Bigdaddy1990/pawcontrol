name: Home Assistant CI mit Auto-Fixes

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

# HA-konformes Concurrency Management
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.13"  # HA 2025.8.2 Standard
  HOMEASSISTANT_VERSION: "2025.8.2"

jobs:
  # Job 1: HA-konforme Code Quality mit Auto-Fixes
  quality:
    name: Code Quality + HA Auto-Fixes
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install HA-konforme Tools
        run: |
          python -m pip install --upgrade pip
          pip install ruff black pyupgrade pre-commit
          
      - name: Generate requirements_test.txt
        run: |
          echo "üì¶ Generating requirements_test.txt from pyproject.toml..."
          python .github/scripts/generate_requirements.py
          
          # Verify generation worked
          if [ -f requirements_test.txt ]; then
            echo "‚úÖ Requirements generated successfully"
            echo "üìã Current requirements:"
            cat requirements_test.txt
          else
            echo "‚ùå Failed to generate requirements_test.txt"
            exit 1
          fi
          
      - name: HA-konforme Auto-Fixes anwenden
        run: |
          echo "üîß Applying Home Assistant auto-fixes..."
          
          # Option 1: Use our HA-Fix script (recommended)
          echo "üéÜ Using integrated HA-fix script..."
          python .github/scripts/ha_fix.py
          
          # Option 2: Individual commands (fallback if script fails)
          # Uncomment if ha_fix.py fails:
          # echo "üîÑ Fallback: Individual HA tools..."
          # find custom_components tests -name "*.py" -exec pyupgrade --py313-plus {} \; || true
          # ruff check --fix custom_components tests || true  
          # ruff format custom_components tests || true
          # black custom_components tests || true
          # ruff check --select I --fix custom_components tests || true

      - name: Run HA pre-commit hooks
        run: pre-commit run --all-files || true
        
      - name: Auto-commit HA-konforme Fixes
        if: github.event_name == 'pull_request'
        run: |
          if ! git diff --quiet; then
            git config --global user.name 'github-actions[bot]'
            git config --global user.email 'github-actions[bot]@users.noreply.github.com'
            git add .
            git commit -m "ü§ñ Apply Home Assistant auto-fixes

            - Applied pyupgrade (Python 3.13+)
            - Applied ruff auto-fixes (HA rules)
            - Applied black formatting
            - Fixed import sorting
            - Applied pre-commit hooks
            "
            git push
          fi

  # Job 2: HA Hassfest Validation (offiziell)
  hassfest:
    name: Hassfest Validation
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        
      - name: Official HA Hassfest
        uses: home-assistant/actions/hassfest@master

  # Job 3: HACS Validation (HA Standard)
  hacs:
    name: HACS Validation  
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        
      - name: HACS Action
        uses: hacs/action@main
        with:
          category: integration
          ignore: brands

  # Job 4: HA-konforme Tests
  tests:
    name: Tests (HA Standards)
    runs-on: ubuntu-latest
    needs: [hassfest, hacs]
    strategy:
      matrix:
        python-version: ["3.13"]
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          
      - name: Install HA Test Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install homeassistant==${{ env.HOMEASSISTANT_VERSION }}
          pip install pytest pytest-asyncio pytest-cov
          pip install pytest-homeassistant-custom-component
          
      - name: Run HA-konforme Tests
        env:
          PYTHONPATH: .
        run: |
          pytest tests/ \
            --cov=custom_components/pawcontrol \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-fail-under=80 \
            -v
          
      - name: Upload Coverage (HA Standard)
        if: matrix.python-version == '3.13'
        uses: codecov/codecov-action@v5
        with:
          files: coverage.xml
          fail_ci_if_error: false

  # Job 5: HA-konforme Release
  release:
    name: Release (HA Standards)
    runs-on: ubuntu-latest
    needs: tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        
      - name: Release Please (HA Standard)
        uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: simple
          
      - name: Build HACS Package
        if: steps.release.outputs.release_created
        run: |
          mkdir -p dist
          zip -r dist/pawcontrol.zip custom_components/pawcontrol
          
      - name: Upload Release Assets
        if: steps.release.outputs.release_created
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.release.outputs.tag_name }}
          files: dist/pawcontrol.zip
          generate_release_notes: true
