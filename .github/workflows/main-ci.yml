name: Main CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

# Verhindert parallele LÃ¤ufe die Rate Limits verursachen
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.13"
  HOMEASSISTANT_VERSION: "2025.8.1"

jobs:
  # Job 1: Code Quality (Linting, Formatting) mit Auto-Fix
  quality:
    name: Code Quality + Auto-Fix
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit ruff

      - name: Auto-fix code quality issues
        run: |
          echo "ðŸ”§ Auto-fixing code quality issues..."
          python scripts/fix_code.py

      - name: Run pre-commit with auto-fixes
        run: pre-commit run --show-diff-on-failure --color always --all-files

      - name: Auto-commit fixes (if any)
        if: github.event_name == 'pull_request'
        run: |
          if ! git diff --quiet; then
            git config --global user.name 'github-actions[bot]'
            git config --global user.email 'github-actions[bot]@users.noreply.github.com'
            git add .
            git commit -m "ðŸ¤– Auto-fix code quality issues"
            git push
          fi

  # Job 2: Home Assistant Validation (lÃ¤uft nur nach quality)
  homeassistant-validation:
    name: Home Assistant Validation
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Hassfest validation
        uses: home-assistant/actions/hassfest@master

      - name: HACS validation
        uses: hacs/action@main
        with:
          category: integration
          ignore: brands

  # Job 3: Tests mit Coverage (lÃ¤uft nur nach HA validation)
  tests:
    name: Tests & Coverage
    runs-on: ubuntu-latest
    needs: homeassistant-validation
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U pytest pytest-asyncio pytest-cov
          pip install -U homeassistant==${{ env.HOMEASSISTANT_VERSION }}
          pip install -U pytest-homeassistant-custom-component

      - name: Run tests with coverage
        env:
          PYTHONPATH: .
        run: |
          pytest --cov=custom_components/pawcontrol --cov-report=xml --cov-report=term-missing --cov-fail-under=95

      - name: Upload coverage to Codecov
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: codecov/codecov-action@v5
        with:
          files: coverage.xml
          fail_ci_if_error: false # Nicht CI brechen wegen Codecov

  # Job 4: Release (nur bei main pushes, nach allen Tests)
  release:
    name: Release Management
    runs-on: ubuntu-latest
    needs: tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Release Please
        uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: simple

      - name: Build HACS package
        if: steps.release.outputs.release_created
        run: |
          mkdir -p dist
          zip -r dist/pawcontrol.zip custom_components/pawcontrol

      - name: Upload Release Assets
        if: steps.release.outputs.release_created
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.release.outputs.tag_name }}
          files: dist/pawcontrol.zip
          generate_release_notes: true
