name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  lint:
    name: Lint (ruff + pre-commit)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install lint deps
        run: |
          python -m pip install --upgrade pip
          pip install ruff pre-commit
      - name: Ruff
        run: ruff check .
      - name: Pre-commit
        run: |
          pre-commit install
          pre-commit run --all-files

  validate:
    name: Validate (hassfest + HACS)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # Offiziell empfohlene Verwendung laut README:
      - name: Hassfest
        uses: home-assistant/actions/hassfest@master
      - name: HACS validation
        uses: hacs/action@main
        with:
          category: integration
          ignore: brands

  tests:
    name: Tests (pytest + coverage)
    runs-on: ubuntu-latest
    needs: [lint, validate]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements_test.txt') }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install test deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements_test.txt ]; then pip install -r requirements_test.txt; fi
          if grep -q "^\[project.optional-dependencies\]" pyproject.toml; then pip install ".[test]"; fi
      - name: Pytest
        run: pytest
      - name: Upload coverage to Codecov (optional)
        if: ${{ secrets.CODECOV_TOKEN != '' }}
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
          verbose: true
