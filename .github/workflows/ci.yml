name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.13"
  HA_VERSION: "2025.9.3"
  COVERAGE_MIN: "95"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Run pre-commit
        run: pre-commit run --show-diff-on-failure --color always --all-files

  test-coverage:
    name: Test & Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U pytest pytest-asyncio pytest-cov coverage[toml]
          pip install -U homeassistant==${{ env.HA_VERSION }}
          pip install -U pytest-homeassistant-custom-component
          pip install -r requirements.txt
          pip install -r requirements_test.txt

      - name: Audit test requirements
        run: |
          python -m script.enforce_test_requirements

      - name: Run tests with coverage gate
        env:
          PYTHONPATH: .
        run: |
          python -m pytest \
            --cov=custom_components/pawcontrol \
            --cov-branch \
            --cov-report=xml:coverage.xml \
            --cov-report=term-missing:skip-covered \
            --cov-report=html:htmlcov \
            --cov-fail-under=${{ env.COVERAGE_MIN }} \
            --junitxml=junit.xml \
            -o junit_family=legacy \
            --maxfail=5 \
            --tb=short \
            tests/

      - name: Upload coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v5
        with:
          files: coverage.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests
          name: pawcontrol-coverage

      - name: Upload test results to Codecov
        if: always()
        uses: codecov/test-results-action@v1
        with:
          files: junit.xml
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload HTML coverage report
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: coverage-report
          path: htmlcov/
          retention-days: 7

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install Ruff
        run: |
          python -m pip install --upgrade pip
          pip install ruff

      - name: Run Ruff check
        run: |
          ruff check custom_components/pawcontrol --output-format=github
          ruff format custom_components/pawcontrol --check

      - name: CodeFactor Analysis
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "CodeFactor analysis runs automatically via webhook"
          echo "Visit: https://www.codefactor.io/repository/github/${{ github.repository }}"

  localization-guards:
    name: Localization & Guide Sync
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Validate localization tables and contributor guides
        env:
          PYTHONPATH: .
        run: |
          python -m script.sync_localization_flags \
            --allowlist script/sync_localization_flags.allowlist \
            --check
          python -m script.sync_contributor_guides --check

  mypy-config:
    name: Type Check Config Flows
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install mypy
        run: |
          python -m pip install --upgrade pip
          pip install mypy

      - name: Run mypy for configuration modules
        run: |
          mypy --follow-imports=skip \
            custom_components/pawcontrol/config_flow.py \
            custom_components/pawcontrol/config_flow_base.py \
            custom_components/pawcontrol/config_flow_dogs.py \
            custom_components/pawcontrol/options_flow.py \
            custom_components/pawcontrol/config_flow_modules.py \
            custom_components/pawcontrol/config_flow_external.py \
            custom_components/pawcontrol/config_flow_dashboard_extension.py \
            custom_components/pawcontrol/config_flow_profile.py

      - name: Run mypy for telemetry modules
        run: |
          mypy --follow-imports=skip \
            custom_components/pawcontrol/repairs.py \
            custom_components/pawcontrol/types.py \
            custom_components/pawcontrol/coordinator_tasks.py \
            custom_components/pawcontrol/performance.py \
            custom_components/pawcontrol/services.py \
            custom_components/pawcontrol/telemetry.py

  validate-manifest:
    name: Validate Manifest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Validate manifest.json
        run: |
          python -c "
          import json
          import sys

          with open('custom_components/pawcontrol/manifest.json', 'r') as f:
              manifest = json.load(f)

          required = ['domain', 'name', 'version', 'documentation', 'codeowners', 'requirements']
          missing = [field for field in required if field not in manifest]

          if missing:
              print(f'Missing required fields: {missing}')
              sys.exit(1)

          print('✅ Manifest validation passed')
          "

  marketplace-validation:
    name: Hassfest & HACS validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run Hassfest
        uses: home-assistant/actions/hassfest@master

      - name: Run HACS validation
        uses: hacs/action@main
        with:
          category: integration
          ignore: brands

  all-checks:
    name: All Checks Passed
    if: always()
    needs:
      [lint, test-coverage, code-quality, localization-guards, mypy-config, validate-manifest, marketplace-validation]
    runs-on: ubuntu-latest
    steps:
      - name: Collect localization guard result
        id: localization_guard
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const JOB_NAME = 'Localization & Guide Sync';
            const runId = process.env.GITHUB_RUN_ID;

            async function fetchJob() {
              const response = await github.rest.actions.listJobsForWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: runId,
                per_page: 100,
              });

              return response.data.jobs.find((job) => job.name === JOB_NAME);
            }

            let job = await fetchJob();
            let attempts = 60;

            while ((!job || job.status !== 'completed') && attempts > 0) {
              await new Promise((resolve) => setTimeout(resolve, 10000));
              job = await fetchJob();
              attempts -= 1;
            }

            if (!job || job.status !== 'completed') {
              core.setOutput('result', 'timed_out');
              return;
            }

            core.setOutput('result', job.conclusion ?? 'neutral');
            if (job.html_url) {
              core.setOutput('url', job.html_url);
            }

      - name: Check status
        run: |
          failures=()

          if [[ "${{ needs.lint.result }}" != "success" ]]; then
            failures+=("lint")
          fi

          if [[ "${{ needs.test-coverage.result }}" != "success" ]]; then
            failures+=("test coverage")
          fi

          if [[ "${{ needs.code-quality.result }}" != "success" ]]; then
            failures+=("code quality")
          fi

          if [[ "${{ needs.mypy-config.result }}" != "success" ]]; then
            failures+=("mypy config")
          fi

          if [[ "${{ needs.validate-manifest.result }}" != "success" ]]; then
            failures+=("manifest validation")
          fi

          if [[ "${{ needs.marketplace-validation.result }}" != "success" ]]; then
            failures+=("marketplace validation")
          fi

          localization_guard_result='${{ steps.localization_guard.outputs.result }}'
          localization_guard_url='${{ steps.localization_guard.outputs.url }}'

          if [[ -z "${localization_guard_result}" ]]; then
            localization_guard_result="success"
          fi

          if [[ "${localization_guard_result}" != "success" ]]; then
            if [[ -n "${localization_guard_url}" ]]; then
              failures+=("localization & guide sync → ${localization_guard_result} (${localization_guard_url})")
            else
              failures+=("localization & guide sync → ${localization_guard_result}")
            fi
          fi

          if [[ ${#failures[@]} -gt 0 ]]; then
            echo "❌ Some checks failed:" >&2
            for failure in "${failures[@]}"; do
              echo " - $failure" >&2
            done
            exit 1
          fi

          echo "✅ All checks passed successfully"
